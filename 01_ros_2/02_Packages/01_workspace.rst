Workspaces
==========

Ros 2 exploits has a workspace structure as follows:

.. code-block::

   /path/to/workspace
   ├── build
   │   ├── COLCON_IGNORE
   │   ├── ros-influxdb-bridge
   │   └── ur_coppeliasim
   ├── install
   │   ├── COLCON_IGNORE
   │   ├── local_setup.bash
   │   ├── local_setup.ps1
   │   ├── local_setup.sh
   │   ├── _local_setup_util_ps1.py
   │   ├── _local_setup_util_sh.py
   │   ├── local_setup.zsh
   │   ├── ros-influxdb-bridge
   │   ├── setup.bash
   │   ├── setup.ps1
   │   ├── setup.sh
   │   ├── setup.zsh
   │   └── ur_coppeliasim
   ├── log
   │   ├── build_2023-11-07_14-41-48
   │   ├── build_2023-11-07_15-35-32
   │   ├── COLCON_IGNORE
   │   ├── latest -> latest_build
   │   └── latest_build -> build_2023-11-07_15-35-32
   └── src
       ├── ros-influxdb-bridge
       └── ur_coppeliasim

Development happens only inside the source `src` folder. Everything else is generated by
by the build system. In ros 2 this is accomplished by `colcon` with the command

.. code-block:: shell

   colcon build

that must be called inside the root directory of the workspace.
Then to let ROS see the available pacakge the setup script inside the workspace must be
called

.. code-block:: shell

   source /path/to/workspace/install/setup.sh

Even this command could be inserted in the ``~/.bashrc`` file for convenience.
